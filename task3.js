/*
*В конечных автоматах, Окрестность Мура содержит восемь клеток, окружающие центральную ячейку двумерной квадратной решетки. 
*Эта область названа в честь Эдварда Ф. Мура, пионера теории конечных автоматов. Существует множество настольных игр с 
*прямоугольной сеткой квадратных ячеек. Для некоторых игр важно знать обстановку в соседних клетках для схемы размещения фишек и стратегии.

*У вас имеется позиция для прямоугольного игрового поля, где 1 клетка с фишкой, а 0 пустая. Также есть координатная сетка, в форме строк 
*и столбцов (нумерация с 0). Вы должны определить сколько фишек близко к этой ячейке. Каждая клетка взаимодействует с восьмью соседними 
*(Горизонтально, вертикально, по диагонали);

*example

*Для примера возьмем (см. рисунок) такую схему:

*[[1, 0, 0, 1, 0],
*[0, 1, 0, 0, 0],
*[0, 0, 1, 0, 1],
*[1, 0, 0, 0, 0],
*[0, 0, 1, 0, 0]]

*Для первого примера координаты ячейки (1, 2) и мы можем видеть на схеме, что у фишки есть 3 соседа. Для второго примера координаты ячейки 
*(0, 0) и эта ячейка содержит фишку, но мы считаем только соседей поэтому ответ 1.

*Входные данные: Три аргумента. Кортеж кортежей с числами (1/0), номер строки и колонки в виде целых чисел.

*Выходные данные: Сколько соседей имеет клетка в виде целого числа.
* https://js.checkio.org/mission/count-neighbours/
*/
function countNeighbours(arr, row, col) {
    var cnt = 0,
        total = 0,
        upCols = [],
        downCols = [];

    if (arr[row][col - 1] > 0) {
        cnt += 1;
    }
    if (arr[row][col + 1] > 0) {
        cnt += 1;
    }
    if (arr[row - 1] != undefined) {
        upCols.push(arr[row - 1][col + 1], arr[row - 1][col], arr[row - 1][col - 1]);
    }
    if (arr[row + 1] != undefined) {
        downCols.push(arr[row + 1][col + 1], arr[row + 1][col], arr[row + 1][col - 1]);
    }

    var sumElem = function (data) {
        var sum = 0;
        data.forEach(function (item, i) {
            if (item > 0) {
                sum += 1;
            }
        });
        return sum;
    }
    // console.log( sumElem(upCols) );

    return total = cnt + sumElem(upCols) + sumElem(downCols);
}


console.log(
    countNeighbours([
        [1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0]], 1, 2
    )
);

console.log(
    countNeighbours([
        [1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0]], 0, 0
    )
);

console.log(
    countNeighbours([
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]], 0, 2
    )
);

console.log(
    countNeighbours([
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0]], 1, 1
    )
);